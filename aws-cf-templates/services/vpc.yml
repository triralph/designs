---
AWSTemplateFormatVersion: '2010-09-09'
Description: v1.0 vpc
Parameters:
  Project:
    Type: String
    Default: null

Mappings:
  SubnetConfig:
    Vpc:
      CIDR: 10.11.0.0/16
    PublicSubnet1:
      CIDR: 10.11.1.0/24
    PublicSubnet2:
      CIDR: 10.11.2.0/24
    PrivateSubnet1:
      CIDR: 10.11.10.0/24
    PrivateSubnet2:
      CIDR: 10.11.20.0/24

Resources:
  AZ1:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AvailabilityZone1
      Type: String
      Value: us-east-1a
  AZ2:
    Type: AWS::SSM::Parameter
    Properties:
      Name: AvailabilityZone2
      Type: String
      Value: us-east-1b
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [SubnetConfig, Vpc, CIDR]
      Tags:
      - Key: Name
        Value: !Sub ${Project}-vpc
  VirtualPrivateGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Name
          Value: !Sub ${Project}-virtual-private-gw
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${Project}-igw
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway   
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !GetAtt AZ1.Value
      CidrBlock: !FindInMap [SubnetConfig, PublicSubnet1, CIDR]
      Tags:
      - Key: Name
        Value: !Sub ${Project}-subnet-public-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !GetAtt AZ2.Value
      CidrBlock: !FindInMap [SubnetConfig, PublicSubnet2, CIDR]
      Tags:
      - Key: Name
        Value: !Sub ${Project}-subnet-public-2
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !GetAtt AZ1.Value
      CidrBlock: !FindInMap [SubnetConfig, PrivateSubnet1, CIDR]
      Tags:
      - Key: Name
        Value: !Sub ${Project}-subnet-private-1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !GetAtt AZ2.Value
      CidrBlock: !FindInMap [SubnetConfig, PrivateSubnet2, CIDR]
      Tags:
      - Key: Name
        Value: !Sub ${Project}-subnet-private-2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Project}-rt-public
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Project}-rt-private-1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Project}-rt-private-2
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2
  PublicSubnetToInternetGatewayRouteTableEntry:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateSubnet1ToNatInstanceRouteTableEntry:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet2ToNatInstanceRouteTableEntry:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PublicSubnetAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Project}-acl-public
  PrivateSubnetAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: !Sub ${Project}-acl-private
  PublicSubnet1AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicSubnetAcl
  PublicSubnet2AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicSubnetAcl
  PrivateSubnet1AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateSubnetAcl
  PrivateSubnet2AclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateSubnetAcl
  PublicSubnetAclInboundHttpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  PublicSubnetAclInboundHttpsEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  PublicSubnetAclInboundSshEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22
  PublicSubnetInboundNetworkACLFTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 111
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 21
        To: 21
  PublicSubnetAclInboundEphemeralTcpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 103
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  PublicSubnetAclInboundEphemeralUdpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 104
      Protocol: 17
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535
  PublicSubnetAclOutboundTcpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 105
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  PublicSubnetAclOutboundUdpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 106
      Protocol: 17
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535
  PublicSubnetAclOutboundIcmpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 107
      Protocol: 1
      Icmp:
        Code: -1
        Type: -1
      RuleAction: allow
      Egress: true
      CidrBlock: !FindInMap [SubnetConfig, Vpc, CIDR]
  PublicSubnetAclInboundIcmpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 108
      Protocol: 1
      Icmp:
        Code: -1
        Type: -1
      RuleAction: allow
      Egress: false
      CidrBlock: !FindInMap [SubnetConfig, Vpc, CIDR]
  PublicSubnetAclInboundSprintWebServiceEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 109
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 444
        To: 444
  PublicSubnetAclInboundNtpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: 110
      Protocol: 17
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 123
        To: 123
  PrivateSubnetAclInboundHttpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  PrivateSubnetAclInboundHttpsEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  PrivateSubnetAclInboundSshEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 102
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22
  PrivateSubnetAclInboundRedisEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 103
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 6379
        To: 6379
  PrivateSubnetAclInboundPostgreSQLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 104
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 5432
        To: 5432
  PrivateSubnetAclInboundEphemeralTcpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 105
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  PrivateSubnetAclInboundEphemeralUdpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 106
      Protocol: 17
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535
  PrivateSubnetAclInboundSprintWebServiceEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 111
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 444
        To: 444
  PrivateSubnetAclOutboundTcpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 107
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  PrivateSubnetAclOutboundUdpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 108
      Protocol: 17
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  PrivateSubnetAclOutboundIcmpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 109
      Protocol: 1
      Icmp:
        Code: -1
        Type: -1
      RuleAction: allow
      Egress: true
      CidrBlock: !FindInMap [SubnetConfig, Vpc, CIDR]
  PrivateSubnetAclInboundIcmpEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateSubnetAcl
      RuleNumber: 110
      Protocol: 1
      Icmp:
        Code: -1
        Type: -1
      RuleAction: allow
      Egress: false
      CidrBlock: !FindInMap [SubnetConfig, Vpc, CIDR]
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTrafficEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Sub ${Project}-nat-gateway-1
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTrafficEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: !Sub ${Project}-nat-gateway-2
  NatGatewayTrafficEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGatewayTrafficEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatDeviceInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable internal access to the Nat device
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 1
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 1
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 1
        ToPort: 1
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 1
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: 1
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 1
        ToPort: 1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${Project}-security-group-nat

Outputs:
  VPC:
    Value: !Ref Vpc
    Export:
      Name: VPC
  PubSub1:
    Value: !Ref PublicSubnet1
    Export:
      Name: PUBLIC-SUBNET-1
  PubSub2:
    Value: !Ref PublicSubnet2
    Export:
      Name: PUBLIC-SUBNET-2
  PrivSub1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: PRIVATE-SUBNET-1
  PrivSub2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: PRIVATE-SUBNET-2
  AZ1:
    Value: !GetAtt AZ1.Value
    Export:
      Name: AZ1
  AZ2:
    Value: !GetAtt AZ2.Value
    Export:
      Name: AZ2
  



