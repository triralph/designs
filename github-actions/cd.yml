name: CD

on:
  push:
    branches:
      - main
      - staging
    paths-ignore:
      - '**.md'

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Notify Slack - Starting Build
        id: slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: slack-channel
          status: STARTING
          color: warning

      - name: Configure AWS Creds
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Tag Name
        id: branch
        run: echo "::set-output name=tag::$(basename ${GITHUB_REF})"

      - name: Build, tag, and push to AWS ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          ENV1: ${{ secrets.ENV1 }}
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.tag }}"
          if [ "${BRANCH_NAME}" == "main" ]
          then
            IMAGE_TAG="latest"
          elif [ "${BRANCH_NAME}" == "staging" ]
          then
            IMAGE_TAG="staging"
          else
            IMAGE_TAG="unknown"
          fi

          if [ "${IMAGE_TAG}" == "unknown" ]
          then
            echo "Not building image for branch ${IMAGE_TAG}"
          else
            echo "Building image for branch ${IMAGE_TAG}"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg ENV1=$ENV1 .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG           
          fi

      - name: Notify Slack - Failure
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: slack-channel
          status: FAILED
          color: danger

      - name: Notify Slack - Success
        if: success()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: slack-channel
          status: SUCCESS
          color: good
